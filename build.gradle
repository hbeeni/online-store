plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'

    id 'com.epages.restdocs-api-spec' version '0.16.4'
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.been'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('hibernate.version', '5.6.5.Final')
    set('profile', !project.hasProperty('profile') ? 'local' : project.property('profile'))
}

repositories {
    mavenCentral()
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

openapi3 {
    if ("${profile}" == 'prod') {
        server = 'http://onlinestoreapi.kro.kr'
    } else {
        server = 'http://localhost:8080'
    }

    title = '쇼핑몰 API'
    description = '쇼핑몰 API 입니다.<br/><br/>' +
            'API는 권한에 따라 [어드민], [일반 회원], [홈]으로 나뉘어 있습니다.<br/>' +
            '[어드민]은 admin 권한만 접근 가능합니다.<br/>' +
            '[일반 회원]은 user 권한만 접근 가능합니다.<br/>' +
            '[홈]은 권한이 없어도 접근 가능합니다.<br/><br/>' +
            '회원가입 및 로그인은 하단에 있습니다.'
    version = '1.0.0'
    format = 'yaml'
}

tasks.register('insertToOpenApiYaml') {
    dependsOn 'processResources'
    dependsOn 'openapi3'

    doLast {
        def filePath = "${openapi3.outputDirectory}/openapi3.yaml"

        def openApiFile = file(filePath)
        def content = openApiFile.text

        def dir = "src/main/resources/static/insert-to-yaml"
        def addProductText = file("${dir}/add-product.txt").text
        def updateProductImageText = file("${dir}/update-product-image.txt").text

        def insertionPoint1 = content.indexOf("operationId: admin/product/addProduct") +
                "operationId: admin/product/addProduct".length()
        def insertionPoint2 = content.indexOf("operationId: admin/product/updateProductImage") +
                "operationId: admin/product/updateProductImage".length()

        def section1 = content.substring(0, insertionPoint1) + "\n"
        def section2 = content.substring(insertionPoint1, insertionPoint2) + "\n"
        def section3 = content.substring(insertionPoint2)

        def newContent =
                new StringBuilder().append(section1).append(addProductText)
                        .append(section2).append(updateProductImageText)
                        .append(section3)

        new File(filePath).write(newContent.toString(), "utf-8")
    }
}

tasks.register('copyOpenApiYaml', Copy) {
    dependsOn 'insertToOpenApiYaml'

    def dir = "src/main/resources/static/docs"

    new File("${dir}/openapi3.yaml").delete()
    from("${openapi3.outputDirectory}")
    into(dir)
}

bootJar {
    dependsOn 'copyOpenApiYaml'

    duplicatesStrategy(DuplicatesStrategy.INCLUDE)

    archiveFileName = 'online-store-app.jar'
    from("src/main/resources/static/docs/openapi3.yaml") {
        into "BOOT-INF/classes/static/docs/"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    implementation 'com.querydsl:querydsl-jpa'
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.4'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
